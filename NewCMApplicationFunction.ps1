# ---------------------------------------------------
# Version: 3.0
# Author: Joshua Duffney
# Date: 07/29/2014
# Description: Using PowerShell to create an SCCM Application from information in a .csv file.
# Sources: http://pluralsight.com/training/courses/TableOfContents?courseName=planning-creating-applications-sccm-2012&highlight, http://dexterposh.blogspot.ca/
# ---------------------------------------------------

Function NewCMApplication {


Param(
    [string]$SiteServerName,
    [string]$SiteCode,
    [string]$SharedContentFolder,
    [string]$SourceFolderPath,
    [string]$csvPath
)

## Import CSV file generated by Service Now
$pkgs = Import-Csv "$csvPath"

    ## Declare Variables
    $ErrorActionPreference = "stop"
    $Owner = $pkgs.Owner
    $SupportContact = $pkgs.SupportContact
    $Publisher = $pkgs.Publisher
    $ApplicationName = $pkgs.Name
    $ApplicationFullName = $pkgs.Publisher + $pkgs.Name + $pkgs.SoftwareVersion
    $SoftwareVersion = $pkgs.SoftwareVersion
    $InstallationProgram = $pkgs.InstallationProgram
    $ContentLocation = $ApplicationSourceContent
    $MaximumAllowedRunTimeMinutes = [int]$pkgs.EstimatedInstallationTimeMinutes *= 6
    $ScriptType = "PowerShell"
    $ScriptContent = "if ( (GET-WMIOBJECT win32_product).name -eq '$ApplicationName' ) { $true }"
    $IconLocation = $SourceFolderPath+ '\' + $ApplicationName + '.ico'
    $ApplicationFolder = $pkgs.Publisher
    $CatalogCategory = $pkgs.CatalogCategory
    $ApplicationSourceContent = "$($Publisher)_$($ApplicationName)_$($SoftwareVersion)".Replace(' ','_')
    $ApplicationSourceContent = "$SharedContentFolder\$ApplicationSourceContent"

        #Determine Silent or User Interactive installation
        if (($InstallationProgram -match "/S") -or ($InstallationProgram -match "/Q")) { 
        $InstallationBehaviorType = "InstallforSystem"; $InstallationProgramVisibility = "Hidden"; $DeploymentTypeName = $ApplicationName + " " + "Install Silent"; $LogonRequirementType = "WhetherOrNotUserLoggedOn";
        } else {
        $InstallationBehaviorType = "InstallforUser"; $InstallationProgramVisibility = "Normal"; $DeploymentTypeName = $ApplicationName + " " + "Install"; $LogonRequirementType = "OnlyWhenUserLoggedOn";
        }

    #DeploymentType Hashtable (Hashtable used due to errors caused by $true values in variables and objects)
    $AddCMDeploymentTypeParams = @{
    'ApplicationName' = $ApplicationFullName;
    'DeploymentTypeName' = $DeploymentTypeName;
    'ScriptInstaller' = $true;
    'ManualSpecifyDeploymentType' = $true;
    'InstallationProgram' = $InstallationProgram;
    'ContentLocation' = $ApplicationSourceContent;
    'InstallationBehaviorType' = $InstallationBehaviorType;
    'InstallationProgramVisibility' = $InstallationProgramVisibility;
    'MaximumAllowedRunTimeMinutes' = $MaximumAllowedRunTimeMinutes;
    'EstimatedInstallationTimeMinutes' = $pkgs.EstimatedInstallationTimeMinutes;
    'DetectDeploymentTypeByCustomScript' = $true;
    'ScriptType' = $ScriptType;
    'ScriptContent' = $ScriptContent;
    'LogonRequirementType' = $LogonRequirementType;
    }

    ## Create the shared content folder for the Package
    Try
    {
    Set-Location $env:SystemRoot
    mkdir $ApplicationSourceContent -ErrorAction Stop
    Copy-Item $SourceFolderPath\* $ApplicationSourceContent -Recurse -Force
    }
    Catch [System.IO.IOException]
    {
        Write-Error "$ApplicationSourceContent already exists"
    }
    Catch
    {
        $ErrorMessage = $_.Exception.Message
        $FailedItem = $_.Exception.ItemName
    }   

    ## Import SCCM Console Module
    Try
    {
    Import-Module "$(Split-Path $env:SMS_ADMIN_UI_PATH -Parent)\ConfigurationManager.psd1" -ErrorAction Stop
    Set-Location "$($SiteCode):"
    }
    Catch [System.IO.FileNotFoundException]
    {
        "SCCM Admin Console not installed"
    }
    Catch
    {
        $ErrorMessage = $_.Exception.Message
        $FailedItem = $_.Exception.ItemName
    }
    Finally
    {
        "This Script attempted to import the SCCM module"
    }


    ## Create the application container. This will hold our deployment type.
    Try
    {
    New-CMApplication -Name $ApplicationFullName -Owner $Owner -SupportContact $SupportContact -IconLocationFile $IconLocation -Publisher $Publisher -SoftwareVersion $SoftwareVersion -ErrorAction Stop | Out-Null
    }
    Catch [System.ArgumentException]
    {
            "$ApplicationFullName already exists"
    }
    Catch
    {
            $ErrorMessage = $_.Exception.Message
            $FailedItem = $_.Exception.ItemName
    }

    ## Create the deployment type.
    Try
    {
            Add-CMDeploymentType @AddCMDeploymentTypeParams -ErrorAction Stop | Out-Null
    }
    Catch
    {
            $ErrorMessage = $_.Exception.Message
            $FailedItem = $_.Exception.ItemName
    }

    ## Create SCCM Vendor Folder and Move New Application
    $CMApplication = Get-CMApplication -Name $ApplicationFullName
    Set-Location .\Application
    $VendorFolders = (get-childitem).Name
       
    Try
    {
        New-Item -Name $ApplicationFolder
        Move-CMObject -FolderPath $ApplicationFolder -InputObject $CMApplication -ErrorAction Stop | Out-Null
        cd ..
    }
    Catch [System.InvalidOperationException]
    {
        Move-CMObject -FolderPath $ApplicationFolder -InputObject $CMApplication -ErrorAction Stop | Out-Null
        cd ..
    }
    Catch
    {
        $ErrorMessage = $_.Exception.Message
        $FailedItem = $_.Exception.ItemName
    }

    ## Set DistributionPointSettings
    Try
    {
        $AppliactionID = (Get-CMApplication -name $ApplicationFullName).CI_ID
        Set-CMApplication -Id $AppliactionID -DistributionPointSetting AutoDownload
    }
    Catch [System.Management.Automation.ItemNotFoundException]
    {
        "No Applications found with $ApplicationID"
    }
    Catch
    {
            $ErrorMessage = $_.Exception.Message
            $FailedItem = $_.Exception.ItemName
    }


    ## Set CatalogCategory
    Try
    {
        $AppliactionID = (Get-CMApplication -name $ApplicationFullName).CI_ID
        Set-CMApplication -Id $AppliactionID -UserCategories $CatalogCategory
    }
    Catch [System.Management.Automation.ItemNotFoundException]
    {
        "No Applications found with $ApplicationID"
    }
    Catch
    {
            $ErrorMessage = $_.Exception.Message
            $FailedItem = $_.Exception.ItemName
    }

}

NewCMApplication -SiteServerName ServerName -SiteCode SiteCode -SharedContentFolder "\\Server\ContentSource" -SourceFolderPath "C:\InstallerSource\Notepad++" -csvPath "C:\scripts\singleapplication.csv"
