# ---------------------------------------------------
# Version: 5.0
# Author: Joshua Duffney
# Date: 07/21/2014
# Description: Using PowerShell to create an SCCM Application from information in a .csv file.
# Comments: Refer to CreateSingleCMApplication.csv in the repo to complete the script.
# Sources: http://pluralsight.com/training/courses/TableOfContents?courseName=planning-creating-applications-sccm-2012&highlight, http://dexterposh.blogspot.ca/
# ---------------------------------------------------

## Import CSV file generated by Service Now

$pkgs = Import-Csv "C:\scripts\singleapplication.csv"

    ## Declare Variables
    $ErrorActionPreference = "stop"
    $SiteServerName = 'ServerName'
    $SiteCode = 'SideCode'
    $SharedContentFolder = "\\server\share\ContentSource"
    $SourceFolderPath = $pkgs.SourceFolderPath
    $Publisher = $pkgs.Publisher
    $ApplicationName = $pkgs.Name
    $Version = $pkgs.SoftwareVersion
    $IconLocation = $SourceFolderPath+ '\' + $ApplicationName + '.ico'
   

    ## Connect to SCCM & Verify\Copy Source files
    if(Test-Path $IconLocation){Write-Host "Icon file found...continuing script" -ForegroundColor Green}
        else {Write-Error "Icon file was not found at $IconLocation"}
    if (!(Test-Path "$(Split-Path $env:SMS_ADMIN_UI_PATH -Parent)\ConfigurationManager.psd1")) {
        Write-Error 'Configuration Manager module not found. Is the admin console installed?'
        } elseif (!(Get-Module 'ConfigurationManager')) {
            Import-Module "$(Split-Path $env:SMS_ADMIN_UI_PATH -Parent)\ConfigurationManager.psd1"
        }
        Set-Location "$($SiteCode):"

        if (Get-CMApplication -Name $ApplicationName) {
            Write-Error "The application $ApplicationName already exists."
        }
        $ApplicationSourceContent = "$($Publisher)_$($ApplicationName)_$($Version)".Replace(' ','_')
        $ApplicationSourceContent = "$SharedContentFolder\$ApplicationSourceContent"
        if (!(Test-Path $ApplicationSourceContent)) {
            Set-Location $env:SystemRoot
            mkdir $ApplicationSourceContent | Out-Null
        } else {
            Write-Warning "The path $ApplicationSourceContent already exists"
        }
        Copy-Item $SourceFolderPath\* $ApplicationSourceContent -Recurse -Force
        Write-Host -ForegroundColor green "$ApplicationName directory created"


        ## Create the application container. This will hold our deployment type.
        $NewCmApplicationParams = @{
        'Name'= $pkgs.Publisher + $pkgs.Name + $pkgs.SoftwareVersion;
        'Owner' = $pkgs.Owner;
        'SupportContact' = $pkgs.SupportContact;
        'IconLocationFile' = $IconLocation;
        'Publisher' = $pkgs.Publisher;
        'SoftwareVersion' = $pkgs.SoftwareVersion;
        }
        
        Set-Location "$($SiteCode):"
        New-CMApplication @NewCmApplicationParams | Out-Null
        Write-Host "$ApplicationName Created" -ForegroundColor Green


        ## Create the deployment type.
        $ScriptContent = "if ( (GET-WMIOBJECT win32_product).name -eq '$ApplicationName' ) { $true }"
        $EstimatedInstallationTime = $pkgs.EstimatedInstallationTimeMinutes
        
            #Determine Silent or User Interactive install
            if (($pkgs.InstallationProgram -match "/S") -or ($pkgs.InstallationProgram -match "/Q")) { 
            $InstallationBehaviorType = "InstallforSystem"; $InstallationProgramVisibility = "Hidden"; $DeploymentTypeName = $pkgs.name + " " + "Install Silent"; $LogonRequirementType = "WhetherOrNotUserLoggedOn";
            Write-Host "Silent Install Detected" -ForegroundColor DarkRed
            } else {
            $InstallationBehaviorType = "InstallforUser"; $InstallationProgramVisibility = "Normal"; $DeploymentTypeName = $pkgs.name + " " + "Install"; $LogonRequirementType = "OnlyWhenUserLoggedOn";
            Write-host "User interaction Detected" -ForegroundColor DarkGreen
            }


        $AddCMDeploymentTypeParams = @{
        'ApplicationName' = $pkgs.Publisher + $pkgs.Name + $pkgs.SoftwareVersion;
        'DeploymentTypeName' = $DeploymentTypeName;
        'ScriptInstaller' = $true;
        'ManualSpecifyDeploymentType' = $true;
        'InstallationProgram' = $pkgs.InstallationProgram;
        'ContentLocation' = $ApplicationSourceContent;
        'InstallationBehaviorType' = $InstallationBehaviorType;
        'InstallationProgramVisibility' = $InstallationProgramVisibility;
        'MaximumAllowedRunTimeMinutes' = [int]$pkgs.EstimatedInstallationTimeMinutes *= 6;
        'EstimatedInstallationTimeMinutes' = $pkgs.EstimatedInstallationTimeMinutes;
        'DetectDeploymentTypeByCustomScript' = $true;
        'ScriptType' = "PowerShell";
        'ScriptContent' = $ScriptContent;
        'LogonRequirementType' = $LogonRequirementType;
        }
        
        Add-CMDeploymentType @AddCMDeploymentTypeParams | Out-Null
        Write-Host "$DeploymentTypeName created" -ForegroundColor Green

       ## Create SCCM Vendor Folder and Move New Application
       $ApplicationFullName = $pkgs.Publisher + $pkgs.Name+$pkgs.SoftwareVersion
       $Application = Get-CMApplication -Name $ApplicationFullName
       $ApplicationFolder = $pkgs.Publisher
       
       Set-Location .\Application
       $VendorFolders = (get-childitem).Name
       
       if ($VendorFolders -eq $ApplicationFolder) {
            Move-CMObject -FolderPath $ApplicationFolder -InputObject $Application | Out-Null
            Write-Host "$ApplicationFolder exists moving $ApplicationFullName to $ApplicationFolder" -ForegroundColor Green
       } else {
            New-Item -Name $ApplicationFolder
            Move-CMObject -FolderPath $ApplicationFolder -InputObject $Application | Out-Null
            Write-Host "$ApplicationFolder did not exist creating $ApplicationFolder...then moving $ApplicationFullName" -ForegroundColor Green
       }

      ## Set DistributionPointSettings
      $AppliactionID = (Get-CMApplication -name $ApplicationFullName).CI_ID
      Set-CMApplication -Id $AppliactionID -DistributionPointSetting AutoDownload
      Write-Host "Setting Distribution settings to AutoDownload" -ForegroundColor Green

      ## Set CatalogCategory
      $AppliactionID = (Get-CMApplication -name $ApplicationFullName).CI_ID
      Set-CMApplication -Id $AppliactionID -UserCategories $pkgs.CatalogCategory
      Write-Host "Set CM Catalog Catagory" -ForegroundColor Green
